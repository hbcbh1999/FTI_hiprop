/*!
 * \file memutil.h
 * \brief Memory utility functions for allocating and deallocating arrays
 * defined in datatype.h
 *
 * \detail Consistent with C code generated by codegen from MATLAB code.
 *
 * \author Yijie Zhou
 * \date 2012.08.22
 */



#ifndef __MEMUTIL_H__
#define __MEMUTIL_H__


#include "rtwtypes.h"
#include "datatypes.h"

#define I2dm(i,j,size) (j-1)*(size[0])+(i-1)

#define I3dm(i,j,k,size) ((k-1)*(size[1])+(j-1))*(size[0])+(i-1)
/*
inline int32_T I2d(int32_T i, int32_T j, int32_T *size)
{
    return (j-1)*size[0] + (i-1);
}
inline int32_T I3d(int32_T i, int32_T j, int32_T k, int32_T *size)
{
    return ((k-1)*size[1] + (j-1))*size[0] + (i-1);
}
*/
extern void emxInit_boolean_T(emxArray_boolean_T **pEmxArray, int32_T numDimensions);
extern void emxInit_int32_T(emxArray_int32_T **pEmxArray, int32_T numDimensions);
extern void emxInit_real_T(emxArray_real_T **pEmxArray, int32_T numDimensions);

extern emxArray_int32_T *emxCreateND_int32_T(int32_T numDimensions, int32_T *size);
extern emxArray_real_T *emxCreateND_real_T(int32_T numDimensions, int32_T *size);
extern emxArray_boolean_T *emxCreateND_boolean_T(int32_T numDimensions, int32_T *size);

extern emxArray_int32_T *emxCreate_int32_T(int32_T rows, int32_T cols);
extern emxArray_real_T *emxCreate_real_T(int32_T rows, int32_T cols);
extern emxArray_boolean_T *emxCreate_boolean_T(int32_T rows, int32_T cols);


extern emxArray_int32_T *emxCreateWrapperND_int32_T(int32_T *data, int32_T numDimensions, int32_T *size);
extern emxArray_real_T *emxCreateWrapperND_real_T(real_T *data, int32_T numDimensions, int32_T *size);
extern emxArray_boolean_T *emxCreateWrapperND_boolean_T(boolean_T *data, int32_T numDimensions, int32_T *size);

extern emxArray_int32_T *emxCreateWrapper_int32_T(int32_T *data, int32_T rows, int32_T cols);
extern emxArray_real_T *emxCreateWrapper_real_T(real_T *data, int32_T rows, int32_T cols);
extern emxArray_boolean_T *emxCreateWrapper_boolean_T(boolean_T *data, int32_T rows, int32_T cols);

extern void emxFree_boolean_T(emxArray_boolean_T **pEmxArray);
extern void emxFree_int32_T(emxArray_int32_T **pEmxArray);
extern void emxFree_real_T(emxArray_real_T **pEmxArray);

extern void emxDestroyArray_int32_T(emxArray_int32_T *emxArray);
extern void emxDestroyArray_real_T(emxArray_real_T *emxArray);
extern void emxDestroyArray_boolean_T(emxArray_boolean_T *emxArray);


extern void emxEnsureCapacity(emxArray__common *emxArray, int32_T oldNumel, int32_T elementSize);

extern void addColumnToArray_common(emxArray__common *emxArray, int32_T numColAdd, uint32_T elementSize);

extern void addColumnToArray_int32_T(emxArray_int32_T *emxArray, int32_T numColAdd);
extern void addColumnToArray_real_T(emxArray_real_T *emxArray, int32_T numColAdd);
extern void addColumnToArray_boolean_T(emxArray_boolean_T *emxArray, int32_T numColAdd);

extern void addRowToArray_int32_T(emxArray_int32_T *emxArray, int32_T numRowAdd);
extern void addRowToArray_real_T(emxArray_real_T *emxArray, int32_T numRowAdd);
extern void addRowToArray_boolean_T(emxArray_boolean_T *emxArray, int32_T numRowAdd);

extern void printArray_int32_T(const emxArray_int32_T *emxArray);
extern void printArray_real_T(const emxArray_real_T *emxArray);
extern void printArray_boolean_T(const emxArray_boolean_T *emxArray);

#endif
